services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_monitoring
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-15d}
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - monitoring
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9090/-/ready"]
      interval: 30s
      timeout: 5s
      retries: 5

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_monitoring
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 5s
      retries: 5

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 5s
      retries: 5

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    command: ["--path.rootfs=/host"]
    volumes:
      - /:/host:ro
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 5s
      retries: 5

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-n8n}:${POSTGRES_PASSWORD:-n8n}@${POSTGRES_HOST:-postgres}:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-n8n}?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - monitoring
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 5s
      retries: 5

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    command: ["--redis.addr=${REDIS_HOST:-redis}:${REDIS_PORT:-6379}"]
    ports:
      - "9121:9121"
    networks:
      - monitoring
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 5s
      retries: 5
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes: 
      - es_data:/usr/share/elasticsearch/data
    networks:
      - monitoring
    ulimits:
      memlock:
        soft: -1
        hard: -1

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - monitoring
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.14.1
    container_name: logstash
    ports:
      - "12201:12201/udp"
    volumes:
      - ./config/logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - monitoring
    restart: unless-stopped
  log-sample:
    image: alpine:3.20
    container_name: log-sample
    command: sh -c 'i=0; while true; do echo "app=sample level=INFO msg=\"ping $$i\""; i=$$((i+1)); sleep 3; done'
    logging:
      driver: gelf
      options:
        gelf-address: "udp://host.docker.internal:12201"
        tag: "sample-app"
    networks: [monitoring, backend]
    restart: unless-stopped


networks:
  monitoring: {}
  backend: {}

volumes:
  grafana_data: {}
  es_data: {}
  kibana_data: {}