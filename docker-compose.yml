version: "3.8"

# =====================================
# üèóÔ∏è INFRASTRUCTURE S√âCURIS√âE COMPL√àTE
# =====================================
# Int√©gration des 3 stacks :
# - Fieni : Applications m√©tier (Traefik, n8n, PostgreSQL)
# - Khaoutar : Monitoring & SIEM (Prometheus, Grafana, ELK)
# - Amine : S√©curit√© (Kong, ModSecurity, Suricata)

networks:
  # R√©seau frontal (exposition publique)
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
  
  # R√©seau backend (applications internes)
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/24
  
  # R√©seau monitoring (m√©triques & logs)
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24
  
  # R√©seau s√©curit√© (WAF, IDS, Gateway)
  security:
    driver: bridge
    ipam:
      config:
        - subnet: 172.23.0.0/24

volumes:
  # Volumes persistants
  postgres_data:
  grafana_data:
  elasticsearch_data:
  kong_data:
  prometheus_data:
  suricata_logs:

services:
  # =====================================
  # üõ°Ô∏è COUCHE S√âCURIT√â (Amine)
  # =====================================
  
  # WAF ModSecurity (Point d'entr√©e principal)
  modsecurity:
    image: owasp/modsecurity-crs:nginx
    container_name: waf-modsecurity
    ports:
      - "80:80"
      - "443:443"
    networks:
      - frontend
      - security
    environment:
      - PROXY_SSL=off
      - BACKEND=http://kong:8000
      - PARANOIA=1
      - BLOCKING_PARANOIA=1
    restart: unless-stopped
    depends_on:
      - kong


  # Kong API Gateway
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - security
    restart: unless-stopped

  kong-migration:
    image: kong:2.8
    container_name: kong-migration
    command: "kong migrations bootstrap"
    environment:
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    networks:
      - security
    depends_on:
      - kong-database
    restart: on-failure

  kong:
    image: kong:2.8
    container_name: kong-gateway
    environment:
      KONG_PG_HOST: kong-database
      KONG_PG_USER: ${KONG_PG_USER:-kong}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
    ports:
      - "8001:8001"  # Admin API
    networks:
      - security
      - backend
    depends_on:
      - kong-migration
    restart: unless-stopped
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "kong"

  # Suricata IDS
  suricata:
    image: jasonish/suricata:latest
    container_name: suricata-ids
    cap_add:
      - SYS_NICE
      - NET_ADMIN
    network_mode: host
    volumes:
      - ./amine-security/suricata:/etc/suricata
      - suricata_logs:/var/log/suricata
    restart: unless-stopped
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "ids"

  # =====================================
  # üñ•Ô∏è APPLICATIONS M√âTIER (Fieni)
  # =====================================

  # Reverse Proxy Traefik
  traefik:
    image: traefik:v3.0
    container_name: traefik-proxy
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@localhost}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "8080:8080"  # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./fieni-app/traefik/letsencrypt:/letsencrypt
    networks:
      - backend
      - monitoring
    restart: unless-stopped
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "traefik"

  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres-main
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-n8n123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: unless-stopped
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "postgres"

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    command: redis-server --appendonly yes
    volumes:
      - ./fieni-app/redis-data:/data
    networks:
      - backend
    restart: unless-stopped

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n-workflows
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-n8n}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-n8n123}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-admin123}
      - WEBHOOK_URL=http://localhost:5678
    ports:
      - "5678:5678"
    volumes:
      - ./fieni-app/n8n-data:/home/node/.n8n
    networks:
      - backend
    depends_on:
      - postgres
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=PathPrefix(`/n8n`)"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    restart: unless-stopped
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "n8n"

  # =====================================
  # üìä MONITORING & SIEM (Khaoutar)
  # =====================================

  # Prometheus (collecte m√©triques)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-15d}'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./khaoutar-monitoring/config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
      - backend
    restart: unless-stopped

  # Grafana (dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-monitoring
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./khaoutar-monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./khaoutar-monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoring
    depends_on:
      - prometheus
    restart: unless-stopped

  # Exporteurs m√©triques
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
    restart: unless-stopped

  node_exporter:
      image: prom/node-exporter:latest
      container_name: node_exporter
      command:
        - '--path.rootfs=/host'
        - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
        - '--web.listen-address=0.0.0.0:9100'
      ports:
        - "9100:9100"
      volumes:
        # Volumes Windows-compatibles
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        # Suppression du montage probl√©matique /:/host:ro,rslave
      networks:
        - monitoring
      restart: unless-stopped
      # √âviter les privil√®ges root sur Windows
      user: "nobody"

  postgres_exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres_exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${POSTGRES_USER:-n8n}:${POSTGRES_PASSWORD:-n8n123}@postgres:5432/${POSTGRES_DB:-n8n}?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - monitoring
      - backend
    depends_on:
      - postgres
    restart: unless-stopped

  redis_exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis_exporter
    command:
      - '--redis.addr=redis:6379'
    ports:
      - "9121:9121"
    networks:
      - monitoring
      - backend
    depends_on:
      - redis
    restart: unless-stopped

  # ELK Stack pour SIEM
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - monitoring
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.14.1
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - monitoring
    depends_on:
      - elasticsearch
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.14.1
    container_name: logstash
    ports:
      - "12201:12201/udp"  # GELF input
    volumes:
      - ./khaoutar-monitoring/config/logstash/pipeline:/usr/share/logstash/pipeline
    networks:
      - monitoring
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Service de test pour g√©n√©rer des logs
  log-generator:
    image: alpine:3.20
    container_name: log-generator
    command: sh -c 'i=0; while true; do echo "app=test-app level=INFO msg=\"Test log entry $$i\""; i=$$((i+1)); sleep 30; done'
    networks:
      - monitoring
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:12201"
        tag: "test-app"
    restart: unless-stopped