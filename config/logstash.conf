# Logstash configuration for SIEM
# Pipeline pour centraliser tous les logs de sécurité

input {
  # Input GELF pour recevoir les logs Docker
  gelf {
    port => 12201
  }
  
  # Input pour les logs Suricata
  beats {
    port => 5044
  }
}

filter {
  # Parse des logs WAF ModSecurity
  if [tag] == "waf" {
    grok {
      match => { 
        "message" => "%{COMBINEDAPACHELOG} %{GREEDYDATA:modsec_audit}" 
      }
    }
    
    # Extraire les informations ModSecurity
    if [modsec_audit] {
      grok {
        match => { 
          "modsec_audit" => "ModSecurity: %{GREEDYDATA:modsec_message}" 
        }
      }
    }
    
    # Ajouter des champs pour le SIEM
    mutate {
      add_field => { "event_type" => "waf" }
      add_field => { "security_layer" => "application" }
    }
  }
  
  # Parse des logs Kong Gateway
  if [tag] == "kong" {
    json {
      source => "message"
    }
    
    mutate {
      add_field => { "event_type" => "gateway" }
      add_field => { "security_layer" => "api" }
    }
  }
  
  # Parse des logs Suricata IDS
  if [type] == "suricata" {
    json {
      source => "message"
    }
    
    # Extraction des alertes
    if [event_type] == "alert" {
      mutate {
        add_field => { "security_layer" => "network" }
        add_field => { "threat_severity" => "high" }
      }
    }
  }
  
  # Parse des logs applications
  if [tag] == "n8n" {
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{GREEDYDATA:log_message}" 
      }
    }
    
    mutate {
      add_field => { "event_type" => "application" }
      add_field => { "service" => "n8n" }
    }
  }
  
  # Enrichissement géolocalisation IP
  if [src_ip] {
    geoip {
      source => "src_ip"
      target => "geoip"
    }
  }
  
  # Normalisation timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
  }
  
  # Détection d'attaques basée sur patterns
  if [event_type] == "waf" {
    if [modsec_message] =~ /(?i)(sql|script|union|select|insert|delete|drop|create|alter)/ {
      mutate {
        add_field => { "attack_type" => "sql_injection" }
        add_field => { "threat_level" => "high" }
      }
    }
    
    if [modsec_message] =~ /(?i)(script|javascript|vbscript|onload|onerror|alert|document\.cookie)/ {
      mutate {
        add_field => { "attack_type" => "xss" }
        add_field => { "threat_level" => "high" }
      }
    }
    
    if [modsec_message] =~ /(?i)(\.\.\/|\.\.\\|etc\/passwd|windows\/system32)/ {
      mutate {
        add_field => { "attack_type" => "path_traversal" }
        add_field => { "threat_level" => "medium" }
      }
    }
  }
}

output {
  # Envoi vers Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "security-logs-%{+YYYY.MM.dd}"
  }
  
  # Output de debug (optionnel)
  if [log_level] == "debug" {
    stdout {
      codec => rubydebug
    }
  }
  
  # Alerting pour incidents critiques
  if [threat_level] == "high" {
    file {
      path => "/var/log/security-alerts.log"
      codec => json_lines
    }
  }
}